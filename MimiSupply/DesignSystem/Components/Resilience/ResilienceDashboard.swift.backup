//
//  ResilienceDashboard.swift
//  MimiSupply
//
//  Created by Alex on 15.08.25.
//

import SwiftUI
import Charts
import Combine

/// Comprehensive resilience monitoring dashboard
struct ResilienceDashboard: View {
    @StateObject private var healthMonitor = ServiceHealthMonitor.shared
    @StateObject private var rateLimiterManager = RateLimiterManager.shared
    @StateObject private var circuitBreakerManager = CircuitBreakerManager.shared
    // @StateObject private var requestQueue = RequestQueueManager()
    
    @State private var selectedTab = 0
    @State private var autoRefresh = true
    @State private var refreshTimer: Timer?
    
    var body: some View {
        NavigationView {
            TabView(selection: $selectedTab) {
                // Overview Tab
                overviewTab
                    .tabItem {
                        Label("Overview", systemImage: "gauge.high")
                    }
                    .tag(0)
                
                // Health Monitoring Tab
                healthMonitoringTab
                    .tabItem {
                        Label("Health", systemImage: "heart.pulse")
                    }
                    .tag(1)
                
                // Rate Limiting Tab
                rateLimitingTab
                    .tabItem {
                        Label("Rate Limits", systemImage: "speedometer")
                    }
                    .tag(2)
                
                // Circuit Breakers Tab
                circuitBreakersTab
                    .tabItem {
                        Label("Breakers", systemImage: "bolt.circle")
                    }
                    .tag(3)
                
                // Request Queue Tab
                // requestQueueTab
                //     .tabItem {
                //         Label("Queue", systemImage: "line.3.horizontal")
                //     }
                //     .tag(4)
            }
            .navigationTitle("Resilience Dashboard")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarTrailing) {
                    Menu {
                        Button(action: { Task { await performFullRecovery() } }) {
                            Label("Full Recovery", systemImage: "arrow.clockwise")
                        }
                        
                        Button(action: { Task { await resetAllSystems() } }) {
                            Label("Reset All", systemImage: "trash")
                        }
                        
                        Divider()
                        
                        Toggle("Auto Refresh", isOn: $autoRefresh)
                    } label: {
                        Image(systemName: "ellipsis.circle")
                    }
                }
            }
        }
        .onAppear {
            setupAutoRefresh()
        }
        .onDisappear {
            refreshTimer?.invalidate()
        }
        .onChange(of: autoRefresh) { _, newValue in
            if newValue {
                setupAutoRefresh()
            } else {
                refreshTimer?.invalidate()
            }
        }
    }
    
    // MARK: - Overview Tab
    
    private var overviewTab: some View {
        ScrollView {
            LazyVStack(spacing: Spacing.lg) {
                // System Health Overview
                systemHealthOverview
                
                // Key Metrics
                keyMetricsGrid
                
                // Recent Alerts
                recentAlertsSection
                
                // Quick Actions
                quickActionsSection
            }
            .padding(Spacing.lg)
        }
    }
    
    private var systemHealthOverview: some View {
        VStack(alignment: .leading, spacing: Spacing.md) {
            Text("System Health")
                .font(.headline.scaledFont().weight(.semibold))
            
            HStack(spacing: Spacing.lg) {
                // Overall Health Indicator
                VStack(spacing: Spacing.sm) {
                    ZStack {
                        Circle()
                            .stroke(healthMonitor.overallHealth.color.opacity(0.3), lineWidth: 8)
                            .frame(width: 80, height: 80)
                        
                        Circle()
                            .trim(from: 0, to: healthPercentage)
                            .stroke(healthMonitor.overallHealth.color, lineWidth: 8)
                            .frame(width: 80, height: 80)
                            .rotationEffect(.degrees(-90))
                            .animation(.easeInOut(duration: 1), value: healthPercentage)
                        
                        Image(systemName: healthMonitor.overallHealth == .healthy ? "checkmark" : "exclamationmark")
                            .font(.title2)
                            .foregroundColor(healthMonitor.overallHealth.color)
                    }
                    
                    Text(healthMonitor.overallHealth.rawValue)
                        .font(.caption.scaledFont().weight(.semibold))
                        .foregroundColor(healthMonitor.overallHealth.color)
                }
                
                // Service Breakdown
                VStack(alignment: .leading, spacing: Spacing.sm) {
                    serviceStatusRow("Healthy", count: healthyServicesCount, color: .success)
                    serviceStatusRow("Degraded", count: degradedServicesCount, color: .warning)
                    serviceStatusRow("Unhealthy", count: unhealthyServicesCount, color: .error)
                }
                
                Spacer()
            }
        }
        .padding(Spacing.lg)
        .background(Color.surfaceSecondary.opacity(0.5))
        .clipShape(RoundedRectangle(cornerRadius: 16))
    }
    
    private func serviceStatusRow(_ title: String, count: Int, color: Color) -> some View {
        HStack {
            Circle()
                .fill(color)
                .frame(width: 8, height: 8)
            
            Text(title)
                .font(.caption.scaledFont())
                .foregroundColor(.secondary)
            
            Spacer()
            
            Text("\(count)")
                .font(.caption.scaledFont().weight(.semibold))
                .foregroundColor(color)
        }
    }
    
    private var keyMetricsGrid: some View {
        LazyVGrid(columns: [
            GridItem(.flexible()),
            GridItem(.flexible())
        ], spacing: Spacing.md) {
            MetricCard(
                title: "Avg Response",
                value: "\(healthSummary.averageResponseTime * 1000, specifier: "%.0f")ms",
                icon: "timer",
                color: responseTimeColor
            )
            
            MetricCard(
                title: "Uptime",
                value: "\(healthSummary.averageUptime, specifier: "%.1f")%",
                icon: "checkmark.circle",
                color: .success
            )
            
            MetricCard(
                title: "Queue Size",
                value: "0", // "\(requestQueue.queuedRequests)",
                icon: "line.3.horizontal",
                color: .success // queueColor
            )
            
            MetricCard(
                title: "Rate Limited",
                value: "\(rateLimitedServicesCount)",
                icon: "speedometer",
                color: rateLimitedServicesCount > 0 ? .warning : .success
            )
        }
    }
    
    // MARK: - Health Monitoring Tab
    
    private var healthMonitoringTab: some View {
        ScrollView {
            LazyVStack(spacing: Spacing.lg) {
                // Service Health List
                serviceHealthList
                
                // Health Trends Chart
                healthTrendsChart
            }
            .padding(Spacing.lg)
        }
    }
    
    private var serviceHealthList: some View {
        VStack(alignment: .leading, spacing: Spacing.md) {
            Text("Service Health Status")
                .font(.headline.scaledFont().weight(.semibold))
            
            VStack(spacing: Spacing.sm) {
                ForEach(Array(healthMonitor.services.values), id: \.name) { service in
                    ServiceHealthRow(service: service)
                }
            }
        }
        .padding(Spacing.lg)
        .background(Color.surfaceSecondary.opacity(0.5))
        .clipShape(RoundedRectangle(cornerRadius: 16))
    }
    
    // MARK: - Rate Limiting Tab
    
    private var rateLimitingTab: some View {
        ScrollView {
            LazyVStack(spacing: Spacing.lg) {
                // Rate Limiter Overview
                rateLimiterOverview
                
                // Rate Limiter Details
                rateLimiterDetails
            }
            .padding(Spacing.lg)
        }
    }
    
    private var rateLimiterOverview: some View {
        VStack(alignment: .leading, spacing: Spacing.md) {
            Text("Rate Limiting Status")
                .font(.headline.scaledFont().weight(.semibold))
            
            LazyVGrid(columns: [
                GridItem(.flexible()),
                GridItem(.flexible())
            ], spacing: Spacing.md) {
                ForEach(rateLimiterManager.getAllStatistics(), id: \.identifier) { stats in
                    RateLimiterCard(statistics: stats)
                }
            }
        }
    }
    
    // MARK: - Circuit Breakers Tab
    
    private var circuitBreakersTab: some View {
        ScrollView {
            LazyVStack(spacing: Spacing.lg) {
                // Circuit Breaker Overview
                circuitBreakerOverview
                
                // Circuit Breaker Details
                circuitBreakerDetails
            }
            .padding(Spacing.lg)
        }
    }
    
    private var circuitBreakerOverview: some View {
        VStack(alignment: .leading, spacing: Spacing.md) {
            Text("Circuit Breaker Status")
                .font(.headline.scaledFont().weight(.semibold))
            
            VStack(spacing: Spacing.sm) {
                ForEach(Array(circuitBreakerManager.circuitBreakers.keys), id: \.self) { service in
                    if let breaker = circuitBreakerManager.circuitBreakers[service] {
                        CircuitBreakerRow(service: service, breaker: breaker)
                    }
                }
            }
        }
        .padding(Spacing.lg)
        .background(Color.surfaceSecondary.opacity(0.5))
        .clipShape(RoundedRectangle(cornerRadius: 16))
    }
    
    // MARK: - Request Queue Tab
    
    private var requestQueueTab: some View {
        ScrollView {
            LazyVStack(spacing: Spacing.lg) {
                // Queue Overview
                requestQueueOverview
                
                // Queue Metrics
                requestQueueMetrics
            }
            .padding(Spacing.lg)
        }
    }
    
    private var requestQueueOverview: some View {
        VStack(alignment: .leading, spacing: Spacing.md) {
            Text("Request Queue Status")
                .font(.headline.scaledFont().weight(.semibold))
            
            // let stats = requestQueue.getStatistics()
            
            HStack(spacing: Spacing.xl) {
                QueueMetric(title: "Queued", value: 0, color: .warning) // stats.queuedRequests
                QueueMetric(title: "Processing", value: 0, color: .info) // stats.processingRequests
                QueueMetric(title: "Completed", value: 0, color: .success) // stats.completedRequests
                QueueMetric(title: "Failed", value: 0, color: .error) // stats.failedRequests
            }
        }
        .padding(Spacing.lg)
        .background(Color.surfaceSecondary.opacity(0.5))
        .clipShape(RoundedRectangle(cornerRadius: 16))
    }
    
    // MARK: - Supporting Views
    
    private var recentAlertsSection: some View {
        VStack(alignment: .leading, spacing: Spacing.md) {
            Text("Recent Alerts")
                .font(.headline.scaledFont().weight(.semibold))
            
            VStack(spacing: Spacing.xs) {
                if healthMonitor.criticalServices.isEmpty && healthMonitor.degradedServices.isEmpty {
                    HStack {
                        Image(systemName: "checkmark.circle.fill")
                            .foregroundColor(.success)
                        Text("No active alerts")
                            .font(.body.scaledFont())
                            .foregroundColor(.secondary)
                        Spacer()
                    }
                } else {
                    ForEach(healthMonitor.criticalServices, id: \.self) { service in
                        AlertRow(service: service, severity: .critical)
                    }
                    
                    ForEach(healthMonitor.degradedServices, id: \.self) { service in
                        AlertRow(service: service, severity: .warning)
                    }
                }
            }
        }
        .padding(Spacing.lg)
        .background(Color.surfaceSecondary.opacity(0.5))
        .clipShape(RoundedRectangle(cornerRadius: 16))
    }
    
    private var quickActionsSection: some View {
        VStack(alignment: .leading, spacing: Spacing.md) {
            Text("Quick Actions")
                .font(.headline.scaledFont().weight(.semibold))
            
            LazyVGrid(columns: [
                GridItem(.flexible()),
                GridItem(.flexible())
            ], spacing: Spacing.sm) {
                ActionButton(
                    title: "Recover Services",
                    icon: "arrow.clockwise",
                    color: .accentColor
                ) {
                    Task { await performFullRecovery() }
                }
                
                ActionButton(
                    title: "Reset Limiters",
                    icon: "speedometer",
                    color: .warning
                ) {
                    Task { await rateLimiterManager.resetAll() }
                }
                
                ActionButton(
                    title: "Reset Breakers",
                    icon: "bolt.circle",
                    color: .info
                ) {
                    Task { await resetCircuitBreakers() }
                }
                
                ActionButton(
                    title: "Clear Queue",
                    icon: "trash",
                    color: .error
                ) {
                    // Task { await requestQueue.reset() }
                }
            }
        }
        .padding(Spacing.lg)
        .background(Color.surfaceSecondary.opacity(0.5))
        .clipShape(RoundedRectangle(cornerRadius: 16))
    }
    
    // MARK: - Helper Methods
    
    private func setupAutoRefresh() {
        guard autoRefresh else { return }
        
        refreshTimer = Timer.scheduledTimer(withTimeInterval: 5.0, repeats: true) { _ in
            // Refresh data
        }
    }
    
    private func performFullRecovery() async {
        await healthMonitor.attemptRecovery()
    }
    
    private func resetAllSystems() async {
        await rateLimiterManager.resetAll()
        await resetCircuitBreakers()
        // await requestQueue.reset()
    }
    
    private func resetCircuitBreakers() async {
        for breaker in circuitBreakerManager.circuitBreakers.values {
            await breaker.reset()
        }
    }
    
    // MARK: - Computed Properties
    
    private var healthSummary: SystemHealthSummary {
        healthMonitor.getHealthSummary()
    }
    
    private var healthPercentage: CGFloat {
        switch healthMonitor.overallHealth {
        case .healthy: return 1.0
        case .degraded: return 0.7
        case .unhealthy: return 0.4
        case .critical: return 0.1
        }
    }
    
    private var healthyServicesCount: Int {
        healthMonitor.services.values.filter { $0.status == .healthy }.count
    }
    
    private var degradedServicesCount: Int {
        healthMonitor.services.values.filter { $0.status == .degraded }.count
    }
    
    private var unhealthyServicesCount: Int {
        healthMonitor.services.values.filter { $0.status == .unhealthy }.count
    }
    
    private var responseTimeColor: Color {
        let avgTime = healthSummary.averageResponseTime * 1000
        if avgTime < 200 { return .success }
        else if avgTime < 500 { return .warning }
        else { return .error }
    }
    
    private var queueColor: Color {
        return .success // if requestQueue.queuedRequests == 0 { return .success }
        // else if requestQueue.queuedRequests < 10 { return .warning }
        // else { return .error }
    }
    
    private var rateLimitedServicesCount: Int {
        rateLimiterManager.getAllStatistics().filter { $0.isThrottled }.count
    }
    
    private var healthTrendsChart: some View {
        VStack(alignment: .leading, spacing: Spacing.md) {
            Text("Health Trends")
                .font(.headline.scaledFont().weight(.semibold))
            
            // Placeholder for chart
            Rectangle()
                .fill(Color.gray200)
                .frame(height: 200)
                .overlay(
                    Text("Health Trends Chart")
                        .foregroundColor(.secondary)
                )
                .clipShape(RoundedRectangle(cornerRadius: 12))
        }
        .padding(Spacing.lg)
        .background(Color.surfaceSecondary.opacity(0.5))
        .clipShape(RoundedRectangle(cornerRadius: 16))
    }
    
    private var rateLimiterDetails: some View {
        VStack(alignment: .leading, spacing: Spacing.md) {
            Text("Rate Limiter Details")
                .font(.headline.scaledFont().weight(.semibold))
            
            VStack(spacing: Spacing.sm) {
                ForEach(rateLimiterManager.getAllStatistics(), id: \.identifier) { stats in
                    RateLimiterDetailRow(statistics: stats)
                }
            }
        }
        .padding(Spacing.lg)
        .background(Color.surfaceSecondary.opacity(0.5))
        .clipShape(RoundedRectangle(cornerRadius: 16))
    }
    
    private var circuitBreakerDetails: some View {
        VStack(alignment: .leading, spacing: Spacing.md) {
            Text("Circuit Breaker Details")
                .font(.headline.scaledFont().weight(.semibold))
            
            VStack(spacing: Spacing.sm) {
                ForEach(Array(circuitBreakerManager.circuitBreakers.keys), id: \.self) { service in
                    if let breaker = circuitBreakerManager.circuitBreakers[service] {
                        CircuitBreakerDetailRow(service: service, breaker: breaker)
                    }
                }
            }
        }
        .padding(Spacing.lg)
        .background(Color.surfaceSecondary.opacity(0.5))
        .clipShape(RoundedRectangle(cornerRadius: 16))
    }
    
    private var requestQueueMetrics: some View {
        VStack(alignment: .leading, spacing: Spacing.md) {
            Text("Queue Performance")
                .font(.headline.scaledFont().weight(.semibold))
            
            // let stats = requestQueue.getStatistics()
            
            VStack(spacing: Spacing.sm) {
                MetricDetailRow(title: "Success Rate", value: "100.0%") // "\(stats.successRate * 100, specifier: "%.1f")%"
                MetricDetailRow(title: "Avg Processing Time", value: "0ms") // "\(stats.averageProcessingTime * 1000, specifier: "%.0f")ms"
                MetricDetailRow(title: "Queue Utilization", value: "0.0%") // "\(stats.queueUtilization * 100, specifier: "%.1f")%"
                MetricDetailRow(title: "Processing Utilization", value: "0.0%") // "\(stats.processingUtilization * 100, specifier: "%.1f")%"
            }
        }
        .padding(Spacing.lg)
        .background(Color.surfaceSecondary.opacity(0.5))
        .clipShape(RoundedRectangle(cornerRadius: 16))
    }
}

// MARK: - Supporting Components

struct MetricCard: View {
    let title: String
    let value: String
    let icon: String
    let color: Color
    
    var body: some View {
        VStack(spacing: Spacing.sm) {
            Image(systemName: icon)
                .font(.title2)
                .foregroundColor(color)
            
            Text(value)
                .font(.title3.scaledFont().weight(.bold))
                .foregroundColor(color)
            
            Text(title)
                .font(.caption.scaledFont())
                .foregroundColor(.secondary)
        }
        .frame(maxWidth: .infinity)
        .padding(Spacing.md)
        .background(color.opacity(0.1))
        .clipShape(RoundedRectangle(cornerRadius: 12))
    }
}

struct ServiceHealthRow: View {
    let service: ServiceHealth
    
    var body: some View {
        HStack {
            Circle()
                .fill(service.status.color)
                .frame(width: 8, height: 8)
            
            Text(service.name)
                .font(.body.scaledFont())
            
            if service.isCritical {
                Image(systemName: "exclamationmark.triangle.fill")
                    .font(.caption)
                    .foregroundColor(.warning)
            }
            
            Spacer()
            
            VStack(alignment: .trailing, spacing: 2) {
                Text(service.status.rawValue)
                    .font(.caption.scaledFont().weight(.semibold))
                    .foregroundColor(service.status.color)
                
                if let lastCheck = service.lastCheck {
                    Text(lastCheck, style: .relative)
                        .font(.caption2.scaledFont())
                        .foregroundColor(.secondary)
                }
            }
        }
        .padding(.vertical, Spacing.xs)
    }
}

struct AlertRow: View {
    let service: String
    let severity: AlertSeverity
    
    enum AlertSeverity {
        case warning, critical
        
        var color: Color {
            switch self {
            case .warning: return .warning
            case .critical: return .error
            }
        }
        
        var icon: String {
            switch self {
            case .warning: return "exclamationmark.triangle.fill"
            case .critical: return "exclamationmark.octagon.fill"
            }
        }
    }
    
    var body: some View {
        HStack {
            Image(systemName: severity.icon)
                .foregroundColor(severity.color)
            
            Text("\(service) is \(severity == .critical ? "critical" : "degraded")")
                .font(.body.scaledFont())
            
            Spacer()
            
            Text("Now")
                .font(.caption.scaledFont())
                .foregroundColor(.secondary)
        }
    }
}

struct QueueMetric: View {
    let title: String
    let value: Int
    let color: Color
    
    var body: some View {
        VStack(spacing: Spacing.xs) {
            Text("\(value)")
                .font(.title2.scaledFont().weight(.bold))
                .foregroundColor(color)
            
            Text(title)
                .font(.caption.scaledFont())
                .foregroundColor(.secondary)
        }
    }
}

struct RateLimiterCard: View {
    let statistics: RateLimiterStatistics
    
    var body: some View {
        VStack(alignment: .leading, spacing: Spacing.sm) {
            Text(statistics.identifier)
                .font(.caption.scaledFont().weight(.semibold))
            
            HStack {
                Text("\(statistics.currentTokens)/\(statistics.maxTokens)")
                    .font(.body.scaledFont().weight(.bold))
                
                Spacer()
                
                if statistics.isThrottled {
                    Text("Throttled")
                        .font(.caption2.scaledFont())
                        .foregroundColor(.error)
                        .padding(.horizontal, 4)
                        .background(Color.error.opacity(0.1))
                        .clipShape(RoundedRectangle(cornerRadius: 4))
                }
            }
            
            ProgressView(value: Double(statistics.maxTokens - statistics.currentTokens) / Double(statistics.maxTokens))
                .progressViewStyle(LinearProgressViewStyle(tint: statistics.isThrottled ? .error : .accentColor))
        }
        .padding(Spacing.md)
        .background(Color.surfaceSecondary.opacity(0.5))
        .clipShape(RoundedRectangle(cornerRadius: 12))
    }
}

struct CircuitBreakerRow: View {
    let service: String
    let breaker: EnhancedCircuitBreaker
    
    var body: some View {
        HStack {
            Circle()
                .fill(breaker.state.color)
                .frame(width: 8, height: 8)
            
            Text(service)
                .font(.body.scaledFont())
            
            Spacer()
            
            VStack(alignment: .trailing, spacing: 2) {
                Text(breaker.state.description)
                    .font(.caption.scaledFont().weight(.semibold))
                    .foregroundColor(breaker.state.color)
                
                if breaker.state == .open {
                    Text("\(breaker.recoveryProgress * 100, specifier: "%.0f")%")
                        .font(.caption2.scaledFont())
                        .foregroundColor(.secondary)
                }
            }
        }
        .padding(.vertical, Spacing.xs)
    }
}

struct RateLimiterDetailRow: View {
    let statistics: RateLimiterStatistics
    
    var body: some View {
        VStack(alignment: .leading, spacing: Spacing.xs) {
            HStack {
                Text(statistics.identifier)
                    .font(.body.scaledFont().weight(.semibold))
                
                Spacer()
                
                Text("\(statistics.successRate * 100, specifier: "%.1f")%")
                    .font(.caption.scaledFont())
                    .foregroundColor(statistics.successRate > 0.8 ? .success : .warning)
            }
            
            HStack {
                Text("Tokens: \(statistics.currentTokens)/\(statistics.maxTokens)")
                    .font(.caption.scaledFont())
                    .foregroundColor(.secondary)
                
                Spacer()
                
                Text("Requests: \(statistics.requestsInWindow)")
                    .font(.caption.scaledFont())
                    .foregroundColor(.secondary)
            }
        }
        .padding(.vertical, Spacing.xs)
    }
}

struct CircuitBreakerDetailRow: View {
    let service: String
    let breaker: EnhancedCircuitBreaker
    
    var body: some View {
        VStack(alignment: .leading, spacing: Spacing.xs) {
            HStack {
                Text(service)
                    .font(.body.scaledFont().weight(.semibold))
                
                Spacer()
                
                Text(breaker.state.description)
                    .font(.caption.scaledFont())
                    .foregroundColor(breaker.state.color)
            }
            
            HStack {
                Text("Failures: \(breaker.failureCount)")
                    .font(.caption.scaledFont())
                    .foregroundColor(.secondary)
                
                Spacer()
                
                Text("Successes: \(breaker.successCount)")
                    .font(.caption.scaledFont())
                    .foregroundColor(.secondary)
            }
        }
        .padding(.vertical, Spacing.xs)
    }
}

struct MetricDetailRow: View {
    let title: String
    let value: String
    
    var body: some View {
        HStack {
            Text(title)
                .font(.body.scaledFont())
                .foregroundColor(.secondary)
            
            Spacer()
            
            Text(value)
                .font(.body.scaledFont().weight(.semibold))
        }
    }
}

// MARK: - Preview

struct ResilienceDashboard_Previews: PreviewProvider {
    static var previews: some View {
        ResilienceDashboard()
    }
}